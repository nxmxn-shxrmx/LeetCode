class Solution {
public:
    map<int,unsigned long long>s; 
    vector<int>m;
    map<int,long long>mal;
    int find(int v)
    {
        if(m[v]==v)
            return v;
        
        return m[v]=find(m[v]);
    }
    void make(int i,int j)
    {
        int x=find(i);
        int y=find(j);
        if(s[y]>s[x])
            swap(x,y);
        m[y]=x;
        s[x]+=s[y];
    }
    int minMalwareSpread(vector<vector<int>>& g, vector<int>& initial) {
        
        int n = g.size();
        for(int i = 0;i<n;++i)
        {
            s[i]=1;
        m.push_back(i);
        }
        for(int i = 0;i<n;++i)
        {
            for(int j = i+1;j<n;++j)
            {
                if(g[i][j])
                    make(i,j);
            }
        }
        
        for(auto c:initial)
            mal[find(c)]++;
        
        pair<int,int>h ={1,0};
        for(auto c:initial)
        {
            h = min(h,{-(mal[find(c)]==1)*s[find(c)],c});
        }
        return h.second;
        
        
    }
};